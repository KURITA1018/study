#Ethereumの勉強

##講師について
・HONDO Shunsuke<br>
・Bit Arena、DeskLive（仮）の開発<br>

##イーサリアムの概観
・もしFaceBookで考えた場合。<br>
　　クラサバ：サーバに対して、サーバーにアクセスをしに行く。<br>
　　（AさんがBさんのデータが欲しいとなった場合でも、Bさんは全く関係ない）<br>

　　Ｐ２Ｐ：接続されている誰かにアクセスしに行く。<br>
　　（Ｂさんの情報を接続されている人が誰も持っていなかった場合は、<br>
　　　接続されている人がさらに別の人に聞きにいく）<br>
　　→ここまでは、従来のＰ２Ｐと差がない。<br>

　　ブロックチェーン：巨大な一つのファイルを全員で共有しているイメージ。<br>
　　　　　　　　　全員が巨大な一つのファイルのコピーを持っているイメージ<br>
　　　　　　　　　ファイルの中には、残高情報が書き込まれている。<br>
　　　　　　　　　（好きな文字や、ソースコードも書き込める）<br>

　　例えば、Ａさんが a + 50ETH　、　b - 50ETHにしたい。<br>
　　　　Ｂさんは a - 30ETH　、　b + 30ETHにしたい。<br>
　　　　となると、ファイルを書き込むときにバッティングしてしまう。

　　→　これをどうするのかというと、<br>
　　１．Ａさん、Ｂさんの要求を一つのTxにして、自分がつながっている全員に送信する。<br>
　　２．受信した人は、次々に自分がつながっている人にTxを送信していく。<br>
　　３．そして、このネットワークの中に、このファイルを書き換える権限を持っている人がいる。<br>
　　　　※マイナー<br>
　　４．トランザクションがマイナーにたどり着いたら、早くたどり着いたトランザクションを処理する。<br>
　　　　※例えばAさんのトランザクションが早く着いたら、Ａtxを先に処理する。<br>
　　５．そのあとにＢさんのトランザクションがたどり着いたらそれを処理する。<br>
　　６．マイナーは書き換え終わったら、書き換え終わったトランザクションをブロックにする<br>
　　７．そしたら、マイナーがブロックをつながっている人たちに送信する。<br>
　　８．受け取った人たちは、内容に問題がないことを検証したら、自分のファイルを更新する。<br>
　　９．それを繰り返し、数秒間で全世界に行き渡る。<br>

  ###ハッシュ関数
　　８の中にブロックのＩＤが正しいかどうかを検証する作業がある。<br>
  　　※ある数値よりも小さい値<br>

  　ハッシュ関数という一つの箱の中に以下が入っている。<br>
  　　・トランザクション<br>
  　　・ナンス<br>
  　　・前のブロックのＩＤ<br>
  　→これである一定の計算をすることにより、とある数値が出る<br>
  　　この数値が決められた値よりも小さくなったら、マイナーはこれをＩＤとして採用する。<br>
  　　これを自分がつながっている他の人に送信する。<br>

  ###SolidityとEVM
  　一つの巨大なファイルはセクションに分かれていて、その一つ一つがブロック<br>
   一番最初のブロックだけＩＤがないので、ジェネシスブロックと呼ばれている。<br>

   イーサの場合は、Txの中に、「誰から誰へ」と「好きな情報」を入れることができる。<br>
   イーサリアムの中にプログラムも仕込むことができる。<br>
   　※これがイーサリアムが最初に注目された理由。<br>
　　　今はSolidityという言語が標準で使われている（ほかにも４つくらいある）<br>

　　１．Solidityでプログラムを書く<br>
　　２．自分の手元でバイトコードに変換する<br>
　　３．バイトコードをTxのデータフィールドに入れる<br>
　　４．受け取ったマイナーは自分のＰＣの中にある、ＥＶＭ（イーサリアムバーチャルマシーン）<br>
　　　　にバイトコードを入れて、実行する。<br>
　　５．マイナーは出てきた実行結果をブロックに書き込む。<br>
　　※これをやるメリットは？？？


##一方向性関数
・勘違いされているのはビット・コインは暗号化されているといわれているが、<br>
　暗号化はされていない。暗号化されていたら誰も読めない。<br>
　誰がいくら持っていて、それが正しいのか分からない。<br>

####普通の関数
入力を元に、別の値を算出する。<br>
インプットとアウトプットを比べると、どんな関数なのかわかってしまう。<br>

####Trapdoor関数<br>
（忍者屋敷の扉みたいな、いけるけど戻ってこれないやつ）<br>
Outプットを見ても、Inputが全然わからないやつ。<br>
（Inputが秘密鍵、Outputが公開鍵）<br>

####ハッシュ関数<br>
とある入力に対し、アウトプットをある一定の範囲に収めるために使う関数。<br>
※ただのハッシュ関数は逆を計算できる。<br>

####暗号学的ハッシュ関数 Crypto(SHA)，kecac256 <br>
＝　ハッシュ関数　＋ Ｔｒａｐｄｏｏｒ<br>
一定の範囲の数値を出力するが、出力した値から元の値は計算できない。<br>

####楕円曲線暗号（ＥＣＣ）
・点ＸとＹからＱを出す。ＱからＸは絶対に求められない。<br>
・gethとかBitcoinDに曲線の関数が書いてある。<br>
　曲線のスターティングポイントも全世界のユーザーでシェアしている。<br>
　　ビットコインとかイーサリアムは小数点をなくしたバージョンでやっている<br>
　　折り返し地点も全ユーザーでシェアされている。<br>
→これを応用しているのが、秘密鍵、公開鍵、アドレス

- 秘密鍵<br>
　絶対に知られてはいけない、256bitの数値列<br>
　楕円曲線暗号から自分が作った鍵分だけ、計算していった結果が公開鍵。<br>
　秘密鍵（d）　→　公開鍵(Q)　→　アドレス（イーサリアムはちょうど２０桁）<br>

- アドレス<br>
　Ｑからハッシュ関数を用いて、アドレスを生成する。<br>


###アカウント
・ノードとアカウントは全く別物。<br>
・Ａというノードの中に、アカウントを無数に作れる。<br>
　例えば、Ａというノードが東京にあったとして、Ａのノードに対して、aアカウントを<br>
　作成してくださいとした場合。Ａが東京にあるということはわからない。<br>
　aもＡが作ったということもわからない。<br>
　Ａノードから渡されたＴｘはＡが作ったのか、Ａから流れてきたのかは絶対に分からない。<br>
　※これ重要

###ウォレット　＝　アカウントの集合
####非決定性
・自分で適当な秘密鍵を作ること。

####決定性
・ランダムではなく、ある一つの数値を選んだら、それを関数に入れて、<br>
　いくつかの数値を生み出すこと。<br>
　これはある一つの数値さえ覚えていれば、秘密鍵が生成可能。

####階層的決定性
・決定性を何回か繰り返すこと。<br>
・Metamaskを作ったときに、ニーモニックという１２個の単語を選んだはず。<br>
　Swallow jump coin streetとか　＝　シード

####Ｐ２Ｐネットワークの仕様
・DevP2Pというプロトコルで動いている。<br>
　最初にどうやって隣の人とつながるのか。<br>
　１．まずport30303というポートを探す。<br>
　２．NodeDiscovery（ノードを探す、ほかにイーサ使っている人いませんか？？）／ＵＤＰ<br>
　３．ノート参照<br>
　※イーサの場合は約１５ノード程度とつながって入る。<br>
・フルノード：今までのブロックをすべて持っているノード。<br>
・軽量ノード：ブロックについているヘッダー情報だけを持っている。SPVノード<br>
　　SPVは非力な端末用。（ウォレットの金額確認とか）<br>

####ステートマシン
・イーサ（Slidity）はチューリング完全。<br>
　バイトコードに変換すると、<br>
　　＋　→　ＡＤＤ　：　３geth<br>
　　＊　→　ＭＵＬ　：　３geth<br>
　　ブロックチェーン書き換え　→　ＳＳＴＯＲＥ　：　20000geth<br>
　　読み込み　→　ＳＬＯＡＤ　：　5000geth<br>

→　これに設定したGasPriceをかけて、出た値をマイナーに支払う。<br>
　　実際にかかるコストは実行するまでわからない。

Txの中身<br>
・From<br>
・To<br>
・Value<br>
・Data<br>
・GasLimit<br>
・GasPrice<br>
GasLimitに達した場合は、お金だけ取られる状態になる。<br>

##コンセンサスアルゴリズム（Ethash）
####PoW
・ビットコインではASICという計算に特化したものが登場し、<br>
　誰も太刀打ちできなくなった。<br>
・イーサではそれを無視するようなアルゴリズムを構成した。<br>
　メモリ帯域制限<br>
　　１．Ｔｘ、ナンス、前ハッシュを元に計算。<br>
　　２．それがDAGのページ番号になっている為、そこの中の値をとってくる。<br>
　　３．とってきた値を元に、再度ハッシュで計算。<br>
　　・・・・を６４回繰り返す。<br>
　※これを強化しようとすると、マイニングした費用より高くなる設計になっている。<br>
　　４．最後に出てきた数値が、閾値より少ないかチェックしてＯＫなら出荷する。<br>
　　　　ＮＧだったらまた６４回繰り返す。

##内部データ構造
　・ブロックのヘッダー<br>
　　difficultyも入っている。

　・イーサはマークルパトリシア木を使い、ステートルートを見ると、<br>
　　芋ずる式に誰がいくら持っているのかすべてわかるようになっている。<br>
　・ビットコインはすべてのブロックを見ないとわからなかった。<br>

##JSON RPC（Remote Proceduse Call）
・イーサリアムの閉じた世界に対して、操作する場合に使う。<br>
・JSONはほかのコンピュータに処理を依頼するときのデータフォーマット。<br>

１．Metamaskが持っているJSON RPCに対して～円送金してくれ<br>
　　という要求を出す。
