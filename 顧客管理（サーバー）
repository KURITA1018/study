読み込み
　・ガス価格取得

更新
　・ガス価格取得

送金ステータス
　・今行っているか、終わっているか
　　正しく行っているか、異常なのか

がデータ取得のすべて

ステータスの取得
　・メソッドを一本にする。
　　（簡略化するため）
　・データ取得用のAjax一本（パラメータで制御）
　・すべて、ガス価格、ステータス　の３種類
　・レスポンス（Jsonの連想配列）
　　　・取得した日時、ガス価格、（ステータス）
　・ステータスは最後に終了したもの、今動いているもの、最後に以上になったもの

実行
　・チェック項目
　　　ク）ガス価格：数値、１以上
　　　ク）ファイル：拡張子（CSV）、CSVのファイルチェック
　　　ク）アップロード：転送時のエラーはサーバーに届かない（クライアントエラーで終わり）
　　　クサ）送金トリガーキック：こちらからリクエストチェック
　　　サ）実行中：ログ掃き出し→決まった場所

　・サーバー側で担うところ
　　　情報取得の部分
　　　　ガス価格取得
　　　　価格をとった日時
　　　　ステータスとして今動いているものがあるか
　　　　今動いているものの実行開始日時、全体件数、今の件数、エラー件数、残件数
　　　　異常終了の定義
　　　　　　：プロセスが落ちている
　　　　　　　→プログラムはプロセス化して、Mysqlでプロセス監視する。

　・レスポンスをCSVにすると、必ずCSVで返さなければならなくなる。
　　だから、サーバー側のリソース等を考えてJsonにする。

　・無事動き初めました！というところだけJson
　　結果のCSVとかはサーバーに保存しておけばいい。

　・ペンディングトランザクションは後に成功することも、失敗することもある
　　なので、これをどう扱うか考慮が必要。

　・落ちる、失敗するの定義を決める必要あり。

　・ガス価格の強制終了（何％以上になったら）
　・ガス価格は標準の何％上がいいみたいなものを設定できる。

　・画面上に出てくるガス価格はあてにならない。
　　ガスステーションのAPIを参考にした方がいい。

　・実行終わったものに関してはどんどん消していく。

　・アドレスの入力チェック

　・件数制限はかけたほうがいいのかもしれない。
　　→　エラーで返す。

　・ETH残高を表する必要あり。

　・送金用のアカウントが必要。
　　送るにはロックを解除しなければならない。
　　その際にパスフレーズを画面から入力させるのか、プログラムとして持つのか。
　→　入力させた方がい。
　　アドレスは決めておいて、パスワードは入力させる。
　　（画面上に追加する、毎回入力させる）　

　〇 status
　〇 transfar
　
・リポジトリ
　　最終的には１個にするが、まずはNodeとクライアントで分ける。

・固有名詞の切り替え
・必要な機能に絞る
